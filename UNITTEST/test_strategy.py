# ==========================================================================================================
# TEST MODULE: Strategy!
# ==========================================================================================================

# ==========================================================================================================
# General imports
# ==========================================================================================================
import unittest
import sys
import os
import collections
import numpy as np
# ==========================================================================================================


# ==========================================================================================================
# ADD SYS PATH
# ==========================================================================================================
parent_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
mlp_path = os.path.join(parent_folder, 'strategy')
sys.path.append(mlp_path)
# ==========================================================================================================

# ==========================================================================================================
# local package import
# ==========================================================================================================
from a_share_strategy import top_n_avg_strategy
# ==========================================================================================================


class TestStrategy(unittest.TestCase):

    def test_top_1_avg_strategy(self):

        # --------------------------------------------------------------------------------------------------------------
        # input and get the test result
        # --------------------------------------------------------------------------------------------------------------
        actual_id_value_dict = {('2016-12-29', '600715'): 0.01,
                                ('2016-12-29', '600714'): 0.02,
                                ('2016-12-30', '600713'): 0,
                                ('2016-12-30', '600712'): 1,
                                }
        pred_v_dict = {}
        pred_v_dict['2016-12-29'] = [('600714', 0.001), ('600715', -0.001)]
        pred_v_dict['2016-12-30'] = [('600712', 0), ('600713', -1)]
        include_top = 1

        average_profit, var, std = top_n_avg_strategy(actual_id_value_dict, pred_v_dict, include_top = include_top)
        # --------------------------------------------------------------------------------------------------------------、


        # --------------------------------------------------------------------------------------------------------------
        # manually compute
        # --------------------------------------------------------------------------------------------------------------
        # chosen (12-29, 600714), (12-30, 600712)
        manual_average_profit = (0.02 + 1)/ 2
        manual_var = np.var([0.02,1])
        manual_std = np.std([0.02,1])
        # --------------------------------------------------------------------------------------------------------------


        # --------------------------------------------------------------------------------------------------------------
        # compare
        # --------------------------------------------------------------------------------------------------------------
        self.assertEqual(manual_average_profit, average_profit)
        self.assertEqual(manual_var, var)
        self.assertEqual(manual_std, std)
        # --------------------------------------------------------------------------------------------------------------


    def test_top_3_avg_strategy(self):

        # --------------------------------------------------------------------------------------------------------------
        # input and get the test result
        # --------------------------------------------------------------------------------------------------------------
        actual_id_value_dict = {
                                ('2016-12-28', '600715'): -0.04,
                                ('2016-12-28', '600714'): -0.05,
                                ('2016-12-28', '600713'): -0.06,
                                ('2016-12-28', '600712'): -0.07,
                                ('2016-12-29', '600715'): 0.01,
                                ('2016-12-29', '600714'): 0.02,
                                ('2016-12-29', '600713'): 0,
                                ('2016-12-29', '600712'): 1,
                                ('2016-12-30', '600715'): -0.09,
                                ('2016-12-30', '600714'): -0.01,
                                ('2016-12-30', '600713'): 0,
                                ('2016-12-30', '600712'): 1,
                                }
        pred_v_dict = {}
        pred_v_dict['2016-12-28'] = [('600712', -0.26), ('600713', -0.36),('600714', 0.26), ('600715', 0.002)]
        pred_v_dict['2016-12-29'] = [('600712', 0.17), ('600713', -0.001),('600714', 0.13), ('600715', -0.02)]
        pred_v_dict['2016-12-30'] = [('600712', 0.05), ('600713', -0.223),('600714', 0.06), ('600715', 0.014)]
        include_top = 3

        average_profit, var, std = top_n_avg_strategy(actual_id_value_dict, pred_v_dict, include_top = include_top)
        # --------------------------------------------------------------------------------------------------------------、


        # --------------------------------------------------------------------------------------------------------------
        # manually compute
        # --------------------------------------------------------------------------------------------------------------
        # chosen  (12-28, 600714, 600715, 600712), (12-29, 600712, 600714, 600713), (12-30, 600714, 600712, 600715)
        day1_list = [-0.05, -0.04, -0.07]
        day2_list = [1, 0.02, 0]
        day3_list = [-0.01, 1, -0.09]
        date_list = [np.average(day1_list), np.average(day2_list), np.average(day3_list)]
        manual_average_profit = np.average(date_list)
        manual_var = np.var(date_list)
        manual_std = np.std(date_list)
        # --------------------------------------------------------------------------------------------------------------


        # --------------------------------------------------------------------------------------------------------------
        # compare
        # --------------------------------------------------------------------------------------------------------------
        self.assertEqual(manual_average_profit, average_profit)
        self.assertEqual(manual_var, var)
        self.assertEqual(manual_std, std)
        # --------------------------------------------------------------------------------------------------------------


if __name__ == '__main__':
    unittest.main()
